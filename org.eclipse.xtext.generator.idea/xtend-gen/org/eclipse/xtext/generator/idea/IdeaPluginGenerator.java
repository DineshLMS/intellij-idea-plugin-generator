package org.eclipse.xtext.generator.idea;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xpand2.output.Outlet;
import org.eclipse.xpand2.output.Output;
import org.eclipse.xpand2.output.OutputImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.generator.Generator;
import org.eclipse.xtext.generator.Xtend2ExecutionContext;
import org.eclipse.xtext.generator.Xtend2GeneratorFragment;
import org.eclipse.xtext.generator.idea.IdeaPluginExtension;
import org.eclipse.xtext.xbase.lib.BooleanExtensions;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerExtensions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class IdeaPluginGenerator extends Xtend2GeneratorFragment {
  private static String META_INF_PLUGIN = "META_INF_PLUGIN";
  
  private static String PLUGIN = "PLUGIN";
  
  private static String DOT_IDEA = "DOT_IDEA";
  
  private String encoding;
  
  private String fileExtension;
  
  private Set<String> libraries;
  
  private String pathIdeaPluginProject;
  
  @Inject
  private IdeaPluginExtension _ideaPluginExtension;
  
  public void generate(final Grammar grammar, final Xtend2ExecutionContext ctx) {
      String _languagePath = this._ideaPluginExtension.getLanguagePath(grammar);
      CharSequence _compileLanguage = this.compileLanguage(grammar);
      ctx.writeFile(Generator.SRC_GEN, _languagePath, _compileLanguage);
      String _fileTypePath = this._ideaPluginExtension.getFileTypePath(grammar);
      CharSequence _compileFileType = this.compileFileType(grammar);
      ctx.writeFile(Generator.SRC_GEN, _fileTypePath, _compileFileType);
      String _fileTypeFactoryPath = this._ideaPluginExtension.getFileTypeFactoryPath(grammar);
      CharSequence _compileFileTypeFactory = this.compileFileTypeFactory(grammar);
      ctx.writeFile(Generator.SRC_GEN, _fileTypeFactoryPath, _compileFileTypeFactory);
      String _fileImplPath = this._ideaPluginExtension.fileImplPath(grammar);
      CharSequence _compileFileImpl = this.compileFileImpl(grammar);
      ctx.writeFile(Generator.SRC_GEN, _fileImplPath, _compileFileImpl);
      String _kenTypesPath = this._ideaPluginExtension.getTokenTypesPath(grammar);
      CharSequence _compileTokenTypes = this.compileTokenTypes(grammar);
      ctx.writeFile(Generator.SRC_GEN, _kenTypesPath, _compileTokenTypes);
      String _elementTypesPath = this._ideaPluginExtension.getElementTypesPath(grammar);
      CharSequence _compileElementTypes = this.compileElementTypes(grammar);
      ctx.writeFile(Generator.SRC_GEN, _elementTypesPath, _compileElementTypes);
      String _lexerPath = this._ideaPluginExtension.getLexerPath(grammar);
      CharSequence _compileLexer = this.compileLexer(grammar);
      ctx.writeFile(Generator.SRC_GEN, _lexerPath, _compileLexer);
      String _parserPath = this._ideaPluginExtension.getParserPath(grammar);
      CharSequence _compilePsiParser = this.compilePsiParser(grammar);
      ctx.writeFile(Generator.SRC_GEN, _parserPath, _compilePsiParser);
      String _kenTypeProviderPath = this._ideaPluginExtension.tokenTypeProviderPath(grammar);
      CharSequence _compileTokenTypeProvider = this.compileTokenTypeProvider(grammar);
      ctx.writeFile(Generator.SRC_GEN, _kenTypeProviderPath, _compileTokenTypeProvider);
      String _parserDefinitionPath = this._ideaPluginExtension.getParserDefinitionPath(grammar);
      CharSequence _compileParserDefinition = this.compileParserDefinition(grammar);
      ctx.writeFile(Generator.SRC_GEN, _parserDefinitionPath, _compileParserDefinition);
      String _syntaxHighlighterPath = this._ideaPluginExtension.getSyntaxHighlighterPath(grammar);
      CharSequence _compileSyntaxHighlighter = this.compileSyntaxHighlighter(grammar);
      ctx.writeFile(Generator.SRC_GEN, _syntaxHighlighterPath, _compileSyntaxHighlighter);
      String _syntaxHighlighterFactoryPath = this._ideaPluginExtension.getSyntaxHighlighterFactoryPath(grammar);
      CharSequence _compileSyntaxHighlighterFactory = this.compileSyntaxHighlighterFactory(grammar);
      ctx.writeFile(Generator.SRC_GEN, _syntaxHighlighterFactoryPath, _compileSyntaxHighlighterFactory);
      boolean _operator_notEquals = ObjectExtensions.operator_notEquals(this.pathIdeaPluginProject, null);
      if (_operator_notEquals) {
        {
          OutputImpl _outputImpl = new OutputImpl();
          OutputImpl output = _outputImpl;
          this.addOutlet(output, IdeaPluginGenerator.PLUGIN, this.pathIdeaPluginProject);
          String _operator_plus = StringExtensions.operator_plus(this.pathIdeaPluginProject, "/META-INF");
          this.addOutlet(output, IdeaPluginGenerator.META_INF_PLUGIN, _operator_plus);
          String _operator_plus_1 = StringExtensions.operator_plus(this.pathIdeaPluginProject, "/.idea");
          this.addOutlet(output, IdeaPluginGenerator.DOT_IDEA, _operator_plus_1);
          CharSequence _compilePluginXml = this.compilePluginXml(grammar);
          this.writeFile(output, IdeaPluginGenerator.META_INF_PLUGIN, "plugin.xml", _compilePluginXml);
          String _iml = this.iml();
          CharSequence _compileIml = this.compileIml(grammar);
          this.writeFile(output, IdeaPluginGenerator.PLUGIN, _iml, _compileIml);
          CharSequence _compileModulesXml = this.compileModulesXml(grammar);
          this.writeFile(output, IdeaPluginGenerator.DOT_IDEA, "modules.xml", _compileModulesXml);
          CharSequence _compileMiscXml = this.compileMiscXml(grammar);
          this.writeFile(output, IdeaPluginGenerator.DOT_IDEA, "misc.xml", _compileMiscXml);
        }
      }
  }
  
  public String iml() {
    int _lastIndexOf = this.pathIdeaPluginProject.lastIndexOf("/");
    int _operator_plus = IntegerExtensions.operator_plus(_lastIndexOf, 1);
    String _substring = this.pathIdeaPluginProject.substring(_operator_plus);
    String _operator_plus_1 = StringExtensions.operator_plus(_substring, ".iml");
    return _operator_plus_1;
  }
  
  public void addOutlet(final Output output, final String outletName, final String path) {
    String _encoding = this.getEncoding();
    Outlet _outlet = new Outlet(false, _encoding, outletName, false, path);
    output.addOutlet(_outlet);
  }
  
  public void writeFile(final Output output, final String outletName, final String filename, final CharSequence contents) {
      output.openFile(filename, outletName);
      String _string = contents.toString();
      output.write(_string);
      output.closeFile();
  }
  
  public String getEncoding() {
      boolean _operator_notEquals = ObjectExtensions.operator_notEquals(this.encoding, null);
      if (_operator_notEquals) {
        return this.encoding;
      }
      String _property = System.getProperty("file.encoding");
      return _property;
  }
  
  public boolean addLibrary(final String library) {
    boolean _xblockexpression = false;
    {
      boolean _operator_equals = ObjectExtensions.operator_equals(this.libraries, null);
      if (_operator_equals) {
        HashSet<String> _newHashSet = CollectionLiterals.<String>newHashSet();
        this.libraries = _newHashSet;
      }
      boolean _add = this.libraries.add(library);
      _xblockexpression = (_add);
    }
    return _xblockexpression;
  }
  
  public String setFileExtensions(final String fileExtensions) {
    String[] _split = fileExtensions.split("\\s*,\\s*");
    String _get = ((List<String>)Conversions.doWrapArray(_split)).get(0);
    String _fileExtension = this.fileExtension = _get;
    return _fileExtension;
  }
  
  public String setEncoding(final String encoding) {
    String _encoding = this.encoding = encoding;
    return _encoding;
  }
  
  public String setPathIdeaPluginProject(final String pathIdeaPluginProject) {
    String _pathIdeaPluginProject = this.pathIdeaPluginProject = pathIdeaPluginProject;
    return _pathIdeaPluginProject;
  }
  
  public CharSequence compileModulesXml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project version=\"4\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"ProjectModuleManager\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<modules>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<module fileurl=\"file://$PROJECT_DIR$/");
    String _iml = this.iml();
    _builder.append(_iml, "      ");
    _builder.append("\" filepath=\"$PROJECT_DIR$/");
    String _iml_1 = this.iml();
    _builder.append(_iml_1, "      ");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</modules>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</component>");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileMiscXml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project version=\"4\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_6\" assert-keyword=\"true\" jdk-15=\"true\" project-jdk-name=\"IDEA IC-123.72\" project-jdk-type=\"IDEA JDK\" />");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<output url=\"file://$PROJECT_DIR$/out\" />");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePluginXml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<idea-plugin version=\"2\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<id>");
    String _languageID = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID, "	");
    _builder.append("</id>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<name>");
    String _simpleName = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName, "	");
    _builder.append(" Support</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<description>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("This plugin enables smart editing of ");
    String _simpleName_1 = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName_1, "      ");
    _builder.append(" files.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</description>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<version>1.0.0</version>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<vendor>My Company</vendor>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<idea-version since-build=\"123.72\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<extensions defaultExtensionNs=\"com.intellij\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<lang.syntaxHighlighterFactory key=\"");
    String _languageID_1 = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID_1, "		");
    _builder.append("\" implementationClass=\"");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "		");
    _builder.append(".");
    String _syntaxHighlighterFactoryClassName = this._ideaPluginExtension.getSyntaxHighlighterFactoryClassName(grammar);
    _builder.append(_syntaxHighlighterFactoryClassName, "		");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<lang.parserDefinition language=\"");
    String _languageID_2 = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID_2, "		");
    _builder.append("\" implementationClass=\"");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "		");
    _builder.append(".");
    String _parserDefinitionClassName = this._ideaPluginExtension.getParserDefinitionClassName(grammar);
    _builder.append(_parserDefinitionClassName, "		");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<fileTypeFactory implementation=\"");
    String _langPackageName_1 = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName_1, "		");
    _builder.append(".");
    String _fileTypeFactoryClassName = this._ideaPluginExtension.getFileTypeFactoryClassName(grammar);
    _builder.append(_fileTypeFactoryClassName, "		");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</extensions>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</idea-plugin>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileIml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<module type=\"PLUGIN_MODULE\" version=\"4\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"DevKit.ModuleBuildProperties\" url=\"file://$MODULE_DIR$/META-INF/plugin.xml\" />");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<exclude-output />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<content url=\"file://$MODULE_DIR$\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</content>");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("<orderEntry type=\"jdk\" jdkName=\"IDEA IC-123.72\" jdkType=\"IDEA JDK\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<orderEntry type=\"sourceFolder\" forTests=\"false\" />");
    _builder.newLine();
    {
      for(final String library : this.libraries) {
        _builder.append("    ");
        _builder.append("<orderEntry type=\"module-library\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("<library>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<CLASSES>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("      ");
        _builder.append("<root url=\"jar://");
        _builder.append(library, "          ");
        _builder.append("!/\" />");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("</CLASSES>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<JAVADOC />");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<SOURCES />");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("</library>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("</orderEntry>");
        _builder.newLine();
      }
    }
    _builder.append("  ");
    _builder.append("</component>");
    _builder.newLine();
    _builder.append("</module>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePsiElement(final Grammar grammar, final AbstractRule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _psiPackageName = this._ideaPluginExtension.getPsiPackageName(grammar);
    _builder.append(_psiPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      boolean _hasMultipleAssigment = this._ideaPluginExtension.hasMultipleAssigment(rule);
      if (_hasMultipleAssigment) {
        _builder.newLine();
        _builder.append("import java.util.List;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("import com.intellij.psi.");
    String _psiElementSuperClassName = this._ideaPluginExtension.getPsiElementSuperClassName(rule);
    _builder.append(_psiElementSuperClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _psiElementClassName = this._ideaPluginExtension.getPsiElementClassName(rule);
    _builder.append(_psiElementClassName, "");
    _builder.append(" extends ");
    String _psiElementSuperClassName_1 = this._ideaPluginExtension.getPsiElementSuperClassName(rule);
    _builder.append(_psiElementSuperClassName_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      List<Assignment> _assignmentsWithoutName = this._ideaPluginExtension.getAssignmentsWithoutName(rule);
      for(final Assignment assignment : _assignmentsWithoutName) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        String _typeName = this._ideaPluginExtension.getTypeName(assignment);
        _builder.append(_typeName, "	");
        _builder.append(" ");
        String _getter = this._ideaPluginExtension.getGetter(assignment);
        _builder.append(_getter, "	");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("void ");
        String _setter = this._ideaPluginExtension.getSetter(assignment);
        _builder.append(_setter, "	");
        _builder.append("(");
        String _typeName_1 = this._ideaPluginExtension.getTypeName(assignment);
        _builder.append(_typeName_1, "	");
        _builder.append(" ");
        String _feature = assignment.getFeature();
        _builder.append(_feature, "	");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePsiElementImpl(final Grammar grammar, final AbstractRule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _psiImplPackageName = this._ideaPluginExtension.getPsiImplPackageName(grammar);
    _builder.append(_psiImplPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      boolean _hasMultipleAssigment = this._ideaPluginExtension.hasMultipleAssigment(rule);
      if (_hasMultipleAssigment) {
        _builder.newLine();
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
        _builder.append("import java.util.List;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("import com.intellij.extapi.psi.ASTWrapperPsiElement;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.ASTNode;");
    _builder.newLine();
    {
      boolean _hasMultipleAssigment_1 = this._ideaPluginExtension.hasMultipleAssigment(rule);
      if (_hasMultipleAssigment_1) {
        _builder.append("import com.intellij.psi.tree.TokenSet;");
        _builder.newLine();
      }
    }
    {
      List<Assignment> _assignments = this._ideaPluginExtension.getAssignments(rule);
      boolean _isEmpty = _assignments.isEmpty();
      boolean _operator_not = BooleanExtensions.operator_not(_isEmpty);
      if (_operator_not) {
        _builder.append("import com.intellij.util.IncorrectOperationException;");
        _builder.newLine();
        _builder.append("import ");
        String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
        _builder.append(_parsingPackageName, "");
        _builder.append(".");
        String _elementTypesClassName = this._ideaPluginExtension.getElementTypesClassName(grammar);
        _builder.append(_elementTypesClassName, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import ");
    String _psiPackageName = this._ideaPluginExtension.getPsiPackageName(grammar);
    _builder.append(_psiPackageName, "");
    _builder.append(".");
    String _psiElementClassName = this._ideaPluginExtension.getPsiElementClassName(rule);
    _builder.append(_psiElementClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Iterable<Assignment> _multipleAssignments = this._ideaPluginExtension.getMultipleAssignments(rule);
      Set<Assignment> _set = IterableExtensions.<Assignment>toSet(_multipleAssignments);
      for(final Assignment assignment : _set) {
        _builder.append("import ");
        String _psiPackageName_1 = this._ideaPluginExtension.getPsiPackageName(grammar);
        _builder.append(_psiPackageName_1, "");
        _builder.append(".");
        String _psiElementClassName_1 = this._ideaPluginExtension.getPsiElementClassName(assignment);
        _builder.append(_psiElementClassName_1, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public class ");
    String _psiElementImplClassName = this._ideaPluginExtension.getPsiElementImplClassName(rule);
    _builder.append(_psiElementImplClassName, "");
    _builder.append(" extends ASTWrapperPsiElement implements ");
    String _psiElementClassName_2 = this._ideaPluginExtension.getPsiElementClassName(rule);
    _builder.append(_psiElementClassName_2, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _psiElementImplClassName_1 = this._ideaPluginExtension.getPsiElementImplClassName(rule);
    _builder.append(_psiElementImplClassName_1, "	");
    _builder.append("(ASTNode node) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(node);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      boolean _hasName = this._ideaPluginExtension.hasName(rule);
      if (_hasName) {
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public String getName() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ASTNode node = getNode().findChildByType(");
        String _elementTypesClassName_1 = this._ideaPluginExtension.getElementTypesClassName(grammar);
        _builder.append(_elementTypesClassName_1, "		");
        _builder.append(".");
        String _instanceName = this._ideaPluginExtension.getInstanceName(rule);
        _builder.append(_instanceName, "		");
        _builder.append("_NAME);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if (node == null) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("return \"\";");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return node.getText();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _psiElementClassName_3 = this._ideaPluginExtension.getPsiElementClassName(rule);
        _builder.append(_psiElementClassName_3, "	");
        _builder.append(" setName(String name) throws IncorrectOperationException {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("throw new IncorrectOperationException();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      List<Assignment> _assignmentsWithoutName = this._ideaPluginExtension.getAssignmentsWithoutName(rule);
      for(final Assignment assignment_1 : _assignmentsWithoutName) {
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _typeName = this._ideaPluginExtension.getTypeName(assignment_1);
        _builder.append(_typeName, "	");
        _builder.append(" ");
        String _getter = this._ideaPluginExtension.getGetter(assignment_1);
        _builder.append(_getter, "	");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isMultiple = this._ideaPluginExtension.isMultiple(assignment_1);
          if (_isMultiple) {
            _builder.append("\t");
            _builder.append("\t");
            String _typeName_1 = this._ideaPluginExtension.getTypeName(assignment_1);
            _builder.append(_typeName_1, "		");
            _builder.append(" ");
            String _feature = assignment_1.getFeature();
            _builder.append(_feature, "		");
            _builder.append(" = new ArrayList<");
            String _internalTypeName = this._ideaPluginExtension.getInternalTypeName(assignment_1);
            _builder.append(_internalTypeName, "		");
            _builder.append(">();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("ASTNode[] nodes = getNode().getChildren(TokenSet.create(");
            String _elementTypesClassName_2 = this._ideaPluginExtension.getElementTypesClassName(grammar);
            _builder.append(_elementTypesClassName_2, "		");
            _builder.append(".");
            String _ruleInstanceName = this._ideaPluginExtension.getRuleInstanceName(assignment_1);
            _builder.append(_ruleInstanceName, "		");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (nodes == null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            String _feature_1 = assignment_1.getFeature();
            _builder.append(_feature_1, "			");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("for (ASTNode node : nodes) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            String _feature_2 = assignment_1.getFeature();
            _builder.append(_feature_2, "			");
            _builder.append(".add(new ");
            String _psiElementImplClassName_2 = this._ideaPluginExtension.getPsiElementImplClassName(assignment_1);
            _builder.append(_psiElementImplClassName_2, "			");
            _builder.append("(node));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            String _feature_3 = assignment_1.getFeature();
            _builder.append(_feature_3, "		");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("ASTNode node = getNode().findChildByType(");
            String _elementTypesClassName_3 = this._ideaPluginExtension.getElementTypesClassName(grammar);
            _builder.append(_elementTypesClassName_3, "		");
            _builder.append(".");
            String _instanceName_1 = this._ideaPluginExtension.getInstanceName(rule, assignment_1);
            _builder.append(_instanceName_1, "		");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (node == null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            {
              boolean _isBoolean = this._ideaPluginExtension.isBoolean(assignment_1);
              if (_isBoolean) {
                _builder.append("false");
              } else {
                _builder.append("\"\"");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            {
              boolean _isBoolean_1 = this._ideaPluginExtension.isBoolean(assignment_1);
              if (_isBoolean_1) {
                _builder.append("true");
              } else {
                _builder.append("node.getText()");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void ");
        String _setter = this._ideaPluginExtension.getSetter(assignment_1);
        _builder.append(_setter, "	");
        _builder.append("(");
        String _typeName_2 = this._ideaPluginExtension.getTypeName(assignment_1);
        _builder.append(_typeName_2, "	");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("throw new IncorrectOperationException();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFileImpl(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _psiImplPackageName = this._ideaPluginExtension.getPsiImplPackageName(grammar);
    _builder.append(_psiImplPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.extapi.psi.PsiFileBase;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.FileType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.FileViewProvider;");
    _builder.newLine();
    _builder.append("import ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(".");
    String _fileTypeClassName = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _langPackageName_1 = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName_1, "");
    _builder.append(".");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public final class ");
    String _fileImplClassName = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName, "");
    _builder.append(" extends PsiFileBase {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _fileImplClassName_1 = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName_1, "	");
    _builder.append("(FileViewProvider viewProvider) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(viewProvider, ");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "		");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public FileType getFileType() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _fileTypeClassName_1 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_1, "		");
    _builder.append(".INSTANCE;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFileTypeFactory(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.FileTypeConsumer;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.FileTypeFactory;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _fileTypeFactoryClassName = this._ideaPluginExtension.getFileTypeFactoryClassName(grammar);
    _builder.append(_fileTypeFactoryClassName, "");
    _builder.append(" extends FileTypeFactory {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createFileTypes(@NotNull FileTypeConsumer consumer) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("consumer.consume(");
    String _fileTypeClassName = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName, "		");
    _builder.append(".INSTANCE, ");
    String _fileTypeClassName_1 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_1, "		");
    _builder.append(".DEFAULT_EXTENSION);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFileType(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javax.swing.Icon;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.LanguageFileType;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NonNls;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public final class ");
    String _fileTypeClassName = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName, "");
    _builder.append(" extends LanguageFileType {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final ");
    String _fileTypeClassName_1 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_1, "	");
    _builder.append(" INSTANCE = new ");
    String _fileTypeClassName_2 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_2, "	");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NonNls ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String DEFAULT_EXTENSION = \"");
    _builder.append(this.fileExtension, "	");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _fileTypeClassName_3 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_3, "	");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "		");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDefaultExtension() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return DEFAULT_EXTENSION;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDescription() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _simpleName = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName, "		");
    _builder.append(" files\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Icon getIcon() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _simpleName_1 = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName_1, "		");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLanguage(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.lang.Language;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public final class ");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(" extends Language {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final ");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "	");
    _builder.append(" INSTANCE = new ");
    String _languageClassName_2 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_2, "	");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _languageClassName_3 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_3, "	");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(\"");
    String _languageID = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID, "		");
    _builder.append("\", \"");
    String _languageMimeType = this._ideaPluginExtension.getLanguageMimeType(grammar);
    _builder.append(_languageMimeType, "		");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTokenTypes(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import static ");
    String _parsingPackageName_1 = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName_1, "");
    _builder.append(".");
    String _antlrParserClassName = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName, "");
    _builder.append(".tokenNames;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.TokenSet;");
    _builder.newLine();
    _builder.append("import ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(".");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public abstract class ");
    String _kenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final IElementType[] tokenTypes = new IElementType[tokenNames.length];");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final Map<String, IElementType> nameToTypeMap = new HashMap<String, IElementType>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < tokenNames.length; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tokenTypes[i] = new IElementType(tokenNames[i], ");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "			");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("nameToTypeMap.put(tokenNames[i], tokenTypes[i]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet COMMENTS = TokenSet.create(tokenTypes[");
    String _antlrParserClassName_1 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_1, "	");
    _builder.append(".RULE_SL_COMMENT],");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("tokenTypes[");
    String _antlrParserClassName_2 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_2, "			");
    _builder.append(".RULE_ML_COMMENT]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet LINE_COMMENTS = TokenSet.create(tokenTypes[");
    String _antlrParserClassName_3 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_3, "	");
    _builder.append(".RULE_SL_COMMENT]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet BLOCK_COMMENTS = TokenSet.create(tokenTypes[");
    String _antlrParserClassName_4 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_4, "	");
    _builder.append(".RULE_ML_COMMENT]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet WHITESPACES = TokenSet.create(tokenTypes[");
    String _antlrParserClassName_5 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_5, "	");
    _builder.append(".RULE_WS]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet STRINGS = TokenSet.create(tokenTypes[");
    String _antlrParserClassName_6 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_6, "	");
    _builder.append(".RULE_STRING]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileElementTypes(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IFileElementType;");
    _builder.newLine();
    _builder.append("import ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(".");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _elementTypesClassName = this._ideaPluginExtension.getElementTypesClassName(grammar);
    _builder.append(_elementTypesClassName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("IFileElementType FILE = new IFileElementType(");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "	");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _internalCompileElementTypes = this.internalCompileElementTypes(grammar);
    _builder.append(_internalCompileElementTypes, "	");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence internalCompileElementTypes(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    {
      List<AbstractRule> _allRules = this._ideaPluginExtension.getAllRules(grammar);
      for(final AbstractRule rule : _allRules) {
        _builder.newLine();
        _builder.append("IElementType ");
        String _instanceName = this._ideaPluginExtension.getInstanceName(rule);
        _builder.append(_instanceName, "");
        _builder.append(" = new IElementType(\"");
        String _instanceName_1 = this._ideaPluginExtension.getInstanceName(rule);
        _builder.append(_instanceName_1, "");
        _builder.append("\", ");
        String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
        _builder.append(_languageClassName, "");
        _builder.append(".INSTANCE);");
        _builder.newLineIfNotEmpty();
        {
          List<Assignment> _assignments = this._ideaPluginExtension.getAssignments(rule);
          final Function1<Assignment,String> _function = new Function1<Assignment,String>() {
              public String apply(final Assignment a) {
                String _instanceName = IdeaPluginGenerator.this._ideaPluginExtension.getInstanceName(a);
                return _instanceName;
              }
            };
          List<String> _map = ListExtensions.<Assignment, String>map(_assignments, _function);
          Set<String> _set = IterableExtensions.<String>toSet(_map);
          for(final String instanceName : _set) {
            _builder.newLine();
            _builder.append("IElementType ");
            _builder.append(instanceName, "");
            _builder.append(" = new IElementType(\"");
            _builder.append(instanceName, "");
            _builder.append("\", ");
            String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
            _builder.append(_languageClassName_1, "");
            _builder.append(".INSTANCE);");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          List<EnumLiteralDeclaration> _enumLiteralDeclarations = this._ideaPluginExtension.getEnumLiteralDeclarations(rule);
          final Function1<EnumLiteralDeclaration,String> _function_1 = new Function1<EnumLiteralDeclaration,String>() {
              public String apply(final EnumLiteralDeclaration a) {
                String _instanceName = IdeaPluginGenerator.this._ideaPluginExtension.getInstanceName(a);
                return _instanceName;
              }
            };
          List<String> _map_1 = ListExtensions.<EnumLiteralDeclaration, String>map(_enumLiteralDeclarations, _function_1);
          Set<String> _set_1 = IterableExtensions.<String>toSet(_map_1);
          for(final String instanceName_1 : _set_1) {
            _builder.newLine();
            _builder.append("IElementType ");
            _builder.append(instanceName_1, "");
            _builder.append(" = new IElementType(\"");
            _builder.append(instanceName_1, "");
            _builder.append("\", ");
            String _languageClassName_2 = this._ideaPluginExtension.getLanguageClassName(grammar);
            _builder.append(_languageClassName_2, "");
            _builder.append(".INSTANCE);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileLexer(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.antlr.runtime.ANTLRStringStream;");
    _builder.newLine();
    _builder.append("import org.antlr.runtime.CommonToken;");
    _builder.newLine();
    _builder.append("import org.antlr.runtime.Token;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.lexer.LexerBase;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _lexerClassName = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName, "");
    _builder.append(" extends LexerBase {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ");
    String _antlrLexerClassName = this._ideaPluginExtension.getAntlrLexerClassName(grammar);
    _builder.append(_antlrLexerClassName, "    ");
    _builder.append(" internalLexer;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("private CommonToken token;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private CharSequence buffer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int startOffset;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int endOffset;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void start(CharSequence buffer, int startOffset, int endOffset, int initialState) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.buffer = buffer;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.startOffset = startOffset;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.endOffset = endOffset;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String text = buffer.subSequence(startOffset, endOffset).toString();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("internalLexer = new ");
    String _antlrLexerClassName_1 = this._ideaPluginExtension.getAntlrLexerClassName(grammar);
    _builder.append(_antlrLexerClassName_1, "        ");
    _builder.append("(new ANTLRStringStream(text));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getState() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return token != null ? token.getType() : 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public IElementType getTokenType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (token == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int type = token.getType();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ");
    String _kenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName, "        ");
    _builder.append(".tokenTypes[type];");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getTokenStart() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return startOffset + token.getStartIndex();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getTokenEnd() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return startOffset + token.getStopIndex() + 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void advance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("token = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public CharSequence getBufferSequence() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return buffer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getBufferEnd() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return endOffset;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void locateToken() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (token == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("token = (CommonToken) internalLexer.nextToken();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (token == Token.EOF_TOKEN) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("token = null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTokenTypeProvider(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.idea.TokenTypeProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _kenTypeProviderClassName = this._ideaPluginExtension.getTokenTypeProviderClassName(grammar);
    _builder.append(_kenTypeProviderClassName, "");
    _builder.append(" implements TokenTypeProvider {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final List<IElementType> I_ELEMENT_TYPES = Arrays.asList(");
    String _kenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName, "    ");
    _builder.append(".tokenTypes);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getType(IElementType iElementType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return I_ELEMENT_TYPES.indexOf(iElementType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePsiParser(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.antlr.runtime.RecognitionException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.lang.ASTNode;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.PsiBuilder;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.PsiParser;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _parserClassName = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName, "");
    _builder.append(" implements PsiParser {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ASTNode parse(IElementType root, PsiBuilder builder) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("PsiBuilder.Marker rootMarker = builder.mark();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    String _antlrParserClassName = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName, "            ");
    _builder.append(" ");
    String _antlrParserClassName_1 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    String _firstLower = StringExtensions.toFirstLower(_antlrParserClassName_1);
    _builder.append(_firstLower, "            ");
    _builder.append(" = new ");
    String _antlrParserClassName_2 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    _builder.append(_antlrParserClassName_2, "            ");
    _builder.append("(builder, new ");
    String _kenTypeProviderClassName = this._ideaPluginExtension.getTokenTypeProviderClassName(grammar);
    _builder.append(_kenTypeProviderClassName, "            ");
    _builder.append("());");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    String _antlrParserClassName_3 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    String _firstLower_1 = StringExtensions.toFirstLower(_antlrParserClassName_3);
    _builder.append(_firstLower_1, "            ");
    _builder.append(".entryRule");
    EList<AbstractRule> _rules = grammar.getRules();
    AbstractRule _get = _rules.get(0);
    String _name = _get.getName();
    _builder.append(_name, "            ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    String _antlrParserClassName_4 = this._ideaPluginExtension.getAntlrParserClassName(grammar);
    String _firstLower_2 = StringExtensions.toFirstLower(_antlrParserClassName_4);
    _builder.append(_firstLower_2, "			");
    _builder.append(".appendErrorMessage();");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("} catch (RecognitionException e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new RuntimeException(e);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (!builder.eof()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("builder.advanceLexer();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("rootMarker.done(root);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return builder.getTreeBuilt();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSyntaxHighlighterFactory(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.SingleLazyInstanceSyntaxHighlighterFactory;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.SyntaxHighlighter;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _syntaxHighlighterFactoryClassName = this._ideaPluginExtension.getSyntaxHighlighterFactoryClassName(grammar);
    _builder.append(_syntaxHighlighterFactoryClassName, "");
    _builder.append(" extends SingleLazyInstanceSyntaxHighlighterFactory {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected SyntaxHighlighter createHighlighter() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new ");
    String _syntaxHighlighterClassName = this._ideaPluginExtension.getSyntaxHighlighterClassName(grammar);
    _builder.append(_syntaxHighlighterClassName, "        ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSyntaxHighlighter(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.lexer.Lexer;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.editor.SyntaxHighlighterColors;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.editor.colors.TextAttributesKey;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.SyntaxHighlighterBase;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.append("import ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(".");
    String _lexerClassName = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _parsingPackageName_1 = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName_1, "");
    _builder.append(".");
    String _kenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _syntaxHighlighterClassName = this._ideaPluginExtension.getSyntaxHighlighterClassName(grammar);
    _builder.append(_syntaxHighlighterClassName, "");
    _builder.append(" extends SyntaxHighlighterBase {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Lexer getHighlightingLexer() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new ");
    String _lexerClassName_1 = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName_1, "        ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public TextAttributesKey[] getTokenHighlights(IElementType tokenType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (");
    String _kenTypesClassName_1 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName_1, "        ");
    _builder.append(".STRINGS.contains(tokenType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("return pack(SyntaxHighlighterColors.STRING);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (");
    String _kenTypesClassName_2 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName_2, "		");
    _builder.append(".LINE_COMMENTS.contains(tokenType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return pack(SyntaxHighlighterColors.LINE_COMMENT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (");
    String _kenTypesClassName_3 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName_3, "		");
    _builder.append(".BLOCK_COMMENTS.contains(tokenType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return pack(SyntaxHighlighterColors.JAVA_BLOCK_COMMENT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String myDebugName = tokenType.toString();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (myDebugName.matches(\"^\'.*\\\\w.*\'$\")) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return pack(SyntaxHighlighterColors.KEYWORD);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new TextAttributesKey[0];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileParserDefinition(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.extapi.psi.ASTWrapperPsiElement;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.ASTNode;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.ParserDefinition;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.PsiParser;");
    _builder.newLine();
    _builder.append("import com.intellij.lexer.Lexer;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.project.Project;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.FileViewProvider;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.PsiElement;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.PsiFile;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IFileElementType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.TokenSet;");
    _builder.newLine();
    _builder.append("import ");
    String _psiImplPackageName = this._ideaPluginExtension.getPsiImplPackageName(grammar);
    _builder.append(_psiImplPackageName, "");
    _builder.append(".");
    String _fileImplClassName = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _parserDefinitionClassName = this._ideaPluginExtension.getParserDefinitionClassName(grammar);
    _builder.append(_parserDefinitionClassName, "");
    _builder.append(" implements ParserDefinition {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Lexer createLexer(Project project) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _lexerClassName = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName, "		");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public IFileElementType getFileNodeType() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _elementTypesClassName = this._ideaPluginExtension.getElementTypesClassName(grammar);
    _builder.append(_elementTypesClassName, "		");
    _builder.append(".FILE;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TokenSet getWhitespaceTokens() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _kenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName, "		");
    _builder.append(".WHITESPACES;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TokenSet getCommentTokens() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _kenTypesClassName_1 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName_1, "		");
    _builder.append(".COMMENTS;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TokenSet getStringLiteralElements() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _kenTypesClassName_2 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_kenTypesClassName_2, "		");
    _builder.append(".STRINGS;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PsiParser createParser(Project project) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _parserClassName = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName, "		");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PsiFile createFile(FileViewProvider viewProvider) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _fileImplClassName_1 = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName_1, "		");
    _builder.append("(viewProvider);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return SpaceRequirements.MAY;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PsiElement createElement(ASTNode node) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ASTWrapperPsiElement(node);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
